-- Busted command-line runner

local cli = require 'cliargs'

require 'busted'

local pathseparator = _G.package.config:sub(1,1)
local is_windows = (pathseparator == "\\")
local defaultoutput = is_windows and "plain_terminal" or "utf_terminal"
local defaultpattern = '_spec.lua$'
local defaultlua = 'luajit'
local lpathprefix = "./src/?.lua;./src/?/?.lua;./src/?/init.lua"
local ansicolors = require "ansicolors"
local errors = {}

cli:set_name("busted")
cli:add_flag("--version", "prints the program's version and exits")

cli:optarg("ROOT", "test script file/folder. Folders will be traversed for any file that matches the --pattern option.", "spec", 1)

cli:add_option("-o, --output=LIBRARY", "output library to load", defaultoutput)
cli:add_option("-l, --lua=luajit", "path to the execution environment (luajit or lua), picks first available", defaultlua)
cli:add_option("-d, --cwd=cwd", "path to current working directory")
cli:add_option("-p, --pattern=pattern", "only run test files matching the Lua pattern", defaultpattern)
cli:add_option("-t, --tags=tags", "only run tests with these #tags")
cli:add_option("-m, --lpath=path", "optional path to be prefixed to the Lua module search path", lpathprefix)
cli:add_option("-r, --run=run", "config to run from .busted file")
cli:add_option("--lang=LANG", "language for error messages", "en")
cli:add_flag("-c, --coverage", "do code coverage analysis (requires 'LuaCov' to be installed)")

cli:add_flag("-v, --verbose", "verbose output of errors")
cli:add_flag("-s, --enable-sound", "executes 'say' command if available")
cli:add_flag("--suppress-pending", "suppress 'pending' test output")
cli:add_flag("--defer-print", "defer print to when test suite is complete")

local args = cli:parse_args()

if args then
  if args.version then
    return print(busted._VERSION)
  end

  local path = args.d
  local root_file = path.normpath(path.join(path, ".", args.root))

  local tasks = nil
  local bfile = path.normpath(path.join(path, ".", ".busted"))
  local success, err = pcall(function() tasks = loadfile(bfile)() end)

  if args.run ~= "" then
    if not success then
      return print(err or "")
    elseif type(tasks) ~= "table" then
      return print("Aborting: "..bfile.." file does not return a table.")
    end

    local runConfig = tasks[args.run]

    if type(runConfig) == "table" then
      args = tablex.merge(args, runConfig, true)
    else
      return print("Aborting: task '"..args.run.."' not found, or not a table")
    end
  else
    if success and type(tasks.default) == "table" then
      args = tablex.merge(args, tasks.default, true)
    end
  end

  if args.coverage then
    local result, luacov = pcall(require, "luacov.runner")
    if not result then
      return print("LuaCov not found on the system, try running without --coverage option, or install LuaCov first")
    end
    -- call it to start
    luacov()
    -- exclude busted files
    table.insert(luacov.configuration.exclude, "busted_bootstrap$")
    table.insert(luacov.configuration.exclude, "busted%.")
    table.insert(luacov.configuration.exclude, "luassert%.")
    table.insert(luacov.configuration.exclude, "say%.")
  end

  if #args.lpath > 0 then
    lpathprefix = args.lpath
    lpathprefix = lpathprefix:gsub("^%.[/%\\]", path )
    lpathprefix = lpathprefix:gsub(";%.[/%\\]", ";" .. path)
    package.path = (lpathprefix .. ";" .. package.path):gsub(";;",";")
  end


-- This code should move into busted to be able to do threads
  if args.lang then
    if args.lang:match(".lua") then
      -- not a module name, but a filename has been provided.
      -- in this case the filename should contain the language settings for
      -- both 'busted' and 'luassert', differs from module setup.
      assert(loadfile(path.normpath(path.join(path, args.lang))))()
    else
      require('busted.languages.'..args.lang)
      require('luassert.languages.'..args.lang)
    end
  end

  local output

-- This code should move into busted to be able to do threads
  if args.output then
    if args.output:match(".lua") then
      local o, err = loadfile(path.normpath(path.join(path, args.output)))

      if not err then
        output = assert ( o() , "Unable to open output module" ) ()
      else
        output = require('busted.output.'..defaultoutput)()
      end
    else
      output = require('busted.output.'..args.output)()
    end
  else
    output = require('busted.output.'..defaultoutput)()
  end

  local filelist
  if path.isfile(root_file) then
    filelist = { root_file }
  elseif path.isidr(root_file) then
    local pattern = args.pattern ~= "" and args.pattern or defaultpattern
    filelist = dir.getallfiles(root_file)
    filelist = tablex.filter(filelist, function(filename)
        return path.basename(filename):find(pattern)
      end )      
  end

  busted.options = {
    verbose = args.verbose,
    suppress_pending = args["suppress-pending"],
    defer_print = args["defer-print"],
    sound = args.s,
    cwd = args.d,
    tags = utils.split(args.t, ","),
    output = output,
    success_messages = busted.success_messages or nil,
    failure_messages = busted.failure_messages or nil,
    filelist = filelist,
  }

-- This code should move into busted to be able to do threads
  local function dosinglefile(filename)
    local file, err = loadfile(filename)
    if file then
      file, err = pcall(function() file() end)
    end
    if err then
      table.insert(errors, ansicolors("%{red}An error occurred while loading a test: %{blue}"..err))
    end
  end
  
  local status_string, failures = "", 0
  if filelist then

-- This code should move into busted to be able to do threads (just 1 line, list already in options above)
    tablex.foreachi(filelist, dosinglefile)
    
    status_string, failures = busted()
    print(status_string.."\n")

    for _, msg in ipairs(errors) do
      print(msg)
    end  
    
  else
    table.insert(errors, ansicolors("%{red}An error occurred while accessing file/directory: %{blue}"..root_file .. "\n" .. err).."\n"..ansicolors("%{yellow}re-run with --help for usage"))
  end
  
  os.exit(failures + #errors)
end

